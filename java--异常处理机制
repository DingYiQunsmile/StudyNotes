
# 观察下面两个异常类的继承关系：
ArithmeticException:
    |--java.lang.Exception
        |--java.lang.RuntimeException
            |--java.lang.ArithmeticException



NumberFormatExcpetion:
    |--java.lang.Throwable
       |--java.lang.Expcetion
          |--java.lang.RuntimeException
             |--java.lang.IllegalArgumentException
               |--java.lang.NumberFormatExcpetion


通过两个异常类可以发现所有的异常类型最高的继承类时是Throwable,并且在Throwable下有两个子类：
* Error :指的是JVM错误，这使得程序并没有执行，无法处理
* Exception :值得是程序运行过程中产生的异常，用户可以使用异常处理格式进行处理

package com.yootk.demo;

public class TestDemo {
    public static void main(String[] args) {
        System.out.println("1.除法计算开始");
        try {
            System.out.println("2.除法计算：" + (10 / 0));    //此处产生异常
            // 异常产生之后的语句将不再执行，此处在try中产生异常。所以下面的语句不会再执行
            System.out.println("王浩");
        }catch (ArithmeticException e){
            System.out.println("*******出现异常了*********");
        }finally {
            System.out.println("3.除法计算结束。");
        }
    }
}

输出结果：
        1.除法计算开始
        *******出现异常了*********
        3.除法计算结束。



public class TestDemo {
    public static void main(String[] args) {
        System.out.println("1.除法计算开始");
        try {
            int x = Integer.parseInt(args[0]);  //接受参数并且保存
            int y = Integer.parseInt(args[1]);  //接收参数并且保存
            System.out.println("2.除法计算： + (x / y)");    //此处产生异
            // 异常产生之后的语句将不再执行，此处在try中产生异常。所以下面的语句不会再执行
            System.out.println("王浩");
        }catch (ArithmeticException e){  //处理算数异常
            e.printStackTrace();    //输出异常的完整信息
        }catch (ArrayIndexOutOfBoundsException e){   //处理参数不足异常
            e.printStackTrace();
        }catch (NumberFormatException e){   //处理数字转换异常
            e.printStackTrace();
        } finally {
            System.out.println("### 不管怎样我都执行!");
        }
        System.out.println("3.除法计算结束。");
  }
}


输出结果：

1.除法计算开始
java.lang.ArrayIndexOutOfBoundsException: 0
### 不管怎样我都执行!
	at com.yootk.demo.TestDemo.main(TestDemo.java:12)
3.除法计算结束。



关键词 throws
package com.yootk.demo;

class MyMath{
    public static int div(int x,int y)throws Exception{  // 此方法不处理异常
        return x / y;
    }
}
public class TestDemo {
    public static void main(String[] args) {
    try {   //div 方法抛出异常，必须明确的进行异常的处理
            System.out.println(MyMath.div(10,5));
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}
输出结果为：2
虽然在"MyMath.div(10,2)"计算时一定不会出现任何的异常，但是必须得写异常处理机制
因为这是设计的需要，现在编写的计算操作可能没有问题，但是另一个人就有可能把被除数写成0
并且主方法上也可以使用theows抛出
